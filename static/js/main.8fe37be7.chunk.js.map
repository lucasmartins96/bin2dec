{"version":3,"sources":["components/Header.jsx","components/Main.jsx","App.js","reportWebVitals.js","index.js"],"names":["Header","className","Main","props","renderDecDisplay","decimalNumberDisplay","state","id","handleChange","target","name","value","isNotBinaryNumber","match","setState","renderBinInput","binaryNumberInput","type","placeholder","onChange","renderErrorAlert","role","charToInt","char","parseInt","bin2Dec","decimalNumber","maxExponent","length","i","charBinary","charAt","renderButton","onClick","this","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iNAaeA,MAXf,WACE,OACE,qBAAKC,UAAU,4BAAf,SACE,sBAAKA,UAAU,YAAf,UACE,oBAAIA,UAAU,YAAd,qBACA,mBAAGA,UAAU,OAAb,wD,mCC0FOC,E,kDA9Fb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAQRC,iBAAmB,WACjB,IAAQC,EAAyB,EAAKC,MAA9BD,qBACR,OACE,qBAAKJ,UAAU,qCAAf,SACE,mBAAGM,GAAG,YAAYN,UAAU,2BAA5B,SACGI,OAdU,EAoBnBG,aAAe,YAAkC,IAAD,MAA9BC,OAAUC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,MAC1BC,EAAoBD,EAAME,MAAM,UACtC,EAAKC,UAAL,mBACGJ,EAAOC,GADV,kCAEEC,GAFF,KAtBiB,EA4BnBG,eAAiB,WACf,IAAQC,EAAsB,EAAKb,MAA3Ba,kBACR,OACE,qBAAKf,UAAU,aAAf,SACE,uBACEA,UAAU,+BACVgB,KAAK,SACLP,KAAK,oBACLQ,YAAY,iCACZP,MAAOK,EACPG,SAAU,EAAKX,kBAtCJ,EA4CnBY,iBAAmB,WACjB,OACE,qBAAKnB,UAAU,qBAAqBoB,KAAK,QAAzC,sDA9Ce,EAoDnBC,UAAY,SAACC,GAAD,OAAUC,SAASD,IApDZ,EAsDnBE,QAAU,WACR,MAAiD,EAAKnB,MAA9CU,EAAR,EAAQA,kBACR,IADA,EAA2BJ,kBACH,CAGtB,IAFA,IAAIc,EAAgB,EAChBC,EAAcX,EAAkBY,OAAS,EACpCC,EAAI,EAAGA,EAAIb,EAAkBY,OAAQC,GAAK,EAAG,CACpD,IAAMC,EAAad,EAAkBe,OAAOF,GAC5CH,GAAiB,EAAKJ,UAAUQ,GAAf,SAA8B,EAAKH,GACpDA,GAAe,EAEjB,EAAKb,SAAS,CACZT,qBAAsBqB,MAjET,EAsEnBM,aAAe,WACb,OACE,wBACEf,KAAK,SACLhB,UAAU,qCACVgC,QAAU,kBAAM,EAAKR,WAHvB,wBAtEF,EAAKnB,MAAQ,CACXU,kBAAmB,GACnBJ,mBAAmB,EACnBP,qBAAsB,GALP,E,0CAiFnB,WACE,IAAQO,EAAsBsB,KAAK5B,MAA3BM,kBACR,OACE,0BAASX,UAAU,WAAnB,UACGiC,KAAK9B,mBACL8B,KAAKnB,iBACLH,GAAqBsB,KAAKd,mBAC1Bc,KAAKF,sB,GAzFKG,a,MCWJC,MATf,WACE,OACE,sBAAKnC,UAAU,YAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,QCISoC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.8fe37be7.chunk.js","sourcesContent":["import React from 'react'\n\nfunction Header() {\n  return (\n    <div className=\"jumbotron jumbotron-fluid\">\n      <div className=\"container\">\n        <h1 className=\"display-4\">Bin2Dec</h1>\n        <p className=\"lead\">Conversor de binário para decimal</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Header;\n","import React, { Component } from \"react\";\n\nclass Main extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      binaryNumberInput: \"\",\n      isNotBinaryNumber: false,\n      decimalNumberDisplay: 0,\n    };\n  }\n\n  renderDecDisplay = () => {\n    const { decimalNumberDisplay } = this.state;\n    return (\n      <div className=\"decDisplay mb-5 border border-dark\">\n        <p id=\"resultado\" className=\"display-1 container mb-0\">\n          {decimalNumberDisplay}\n        </p>\n      </div>\n    );\n  }\n\n  handleChange = ({ target: { name, value } }) => {\n    const isNotBinaryNumber = value.match(/[^0-1]/);\n    this.setState({\n      [name]: value,\n      isNotBinaryNumber,\n    });\n  }\n\n  renderBinInput = () => {\n    const { binaryNumberInput } = this.props;\n    return (\n      <div className=\"form-group\">\n        <input\n          className=\"form-control form-control-lg\"\n          type=\"number\"\n          name=\"binaryNumberInput\"\n          placeholder=\"Insira um número binário\"\n          value={binaryNumberInput}\n          onChange={this.handleChange}\n        />\n      </div>\n    );\n  }\n\n  renderErrorAlert = () => {\n    return (\n      <div className=\"alert alert-danger\" role=\"alert\">\n        ❗Ops... Insira somente 0 e 1❗\n      </div>\n    );\n  }\n\n  charToInt = (char) => parseInt(char);\n\n  bin2Dec = () => {\n    const { binaryNumberInput, isNotBinaryNumber } = this.state;\n    if (!isNotBinaryNumber) {\n      let decimalNumber = 0;\n      let maxExponent = binaryNumberInput.length - 1;\n      for (let i = 0; i < binaryNumberInput.length; i += 1) {\n        const charBinary = binaryNumberInput.charAt(i);\n        decimalNumber += this.charToInt(charBinary) * (2 ** maxExponent);\n        maxExponent -= 1;\n      }\n      this.setState({\n        decimalNumberDisplay: decimalNumber,\n      });\n    }\n  }\n\n  renderButton = () => {\n    return (\n      <button\n        type=\"button\"\n        className=\"btn btn-secondary btn-lg btn-block\"\n        onClick={ () => this.bin2Dec() }>\n        Converter\n      </button>\n    );\n  }\n\n  render() {\n    const { isNotBinaryNumber } = this.state;\n    return (\n      <section className=\"conteudo\">\n        {this.renderDecDisplay()}\n        {this.renderBinInput()}\n        {isNotBinaryNumber && this.renderErrorAlert()}\n        {this.renderButton()}\n      </section>\n    );\n  }\n}\n\nexport default Main;\n","import Header from './components/Header';\nimport Main from './components/Main';\nimport './style.css';\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <Header />\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}